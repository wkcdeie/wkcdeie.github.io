<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UINavigationController中适配UIStatusBarStyle</title>
    <url>/iOS/UINavigationController-adapter-UIStatusBarStyle/</url>
    <content><![CDATA[<p>在页面结构使用UINavigationController时, 针对不同的界面使用其自定义<code>preferredStatusBarStyle</code>属性的适配。</p>
<h1 id="古老时代"><a href="#古老时代" class="headerlink" title="古老时代"></a>古老时代</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">setStatusBarStyle</span><span class="params">(<span class="number">_</span> statusBarStyle: UIStatusBarStyle, animated: Bool)</span></span></span><br></pre></td></tr></table></figure>

<p>这个API是从iOS 2.0那个遥远的年代就已经存在的，通过它可以直接设置StatusBar的样式。不过现在都是iOS 13的新时代了，这个API已经在iOS 9之后就已经被Apple标记为<code>deprecated</code>了。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS, introduced: <span class="number">2.0</span>, deprecated: <span class="number">9.0</span>, message: <span class="string">"Use -[UIViewController preferredStatusBarStyle]"</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">setStatusBarStyle</span><span class="params">(<span class="number">_</span> statusBarStyle: UIStatusBarStyle, animated: Bool)</span></span></span><br></pre></td></tr></table></figure>

<p>当然了如果你喜欢，你也可以继续使用它。不过前提是你必须在<code>Info.plist</code>中增加一个<code>View controller-based status bar appearance</code>的配置项，值为<code>NO</code>。默认情况下这个配置项是没有的，默认值为<code>YES</code>。然后你就可以愉快的玩耍了（此次应该有👏）。</p>
<p>如果你是个强迫症患者，面对满屏的deprecated警告，这样你还能忍（灵魂拷问）？当然了，你说我不在乎，拿起键盘就是干！那么恭喜你，为以后埋下了一颗编译级别的雷（😏）。别人下班出去约会妹子，而你还在一个人与bug为伴（凄凄惨惨）。</p>
<h1 id="如何拯救"><a href="#如何拯救" class="headerlink" title="如何拯救"></a>如何拯救</h1><p>其实在iOS 7时代，苹果通过限制改变StatusBar的自由性，进而把控制权交给了UIViewController，每个界面都应该负责所属自己StatusBar的样式。这样一来，事情就变的简单多了。在UIViewController中重写<code>preferredStatusBarStyle</code>属性就能定义自己界面的StatusBar样式了。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123; <span class="keyword">return</span> .<span class="keyword">default</span> &#125;</span><br></pre></td></tr></table></figure>

<p>在应用运行时，由当前所展现的ViewController来决定StatusBar的样式。如果你没有重写此属性，那么默认值为<code>default</code>。但是，如果当前ViewController是由UINavigationController管理的时候，你会发现无论你如何更改此属性都不会有效果（心里默念mmp）。</p>
<p>废话不多说，直接上代码。下面这段代码，是将StatusBar的样式交由当前UINavigationController的栈顶控制器负责。如果<code>topViewController</code>没有重写<code>preferredStatusBarStyle</code>属性，那么默认值就是<code>default</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.topViewController?.preferredStatusBarStyle ?? .<span class="keyword">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方案只适合自定义UINavigationController的时候。如果你没有自定义，直接使用UINavigationController，那么你也可以通过<code>UINavigationBar</code>的<code>barStyle</code>属性，来改变StatusBar的样式。这个不在本文讨论范围之内，不再细说。</p>
<h1 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h1><p>如果你使用present方式来展现一个UINavigationController时，你会发现上述代码会有一点小问题。既不会使用当前present出来的ViewController的<code>preferredStatusBarStyle</code>。当然这种情况也必须是你自定义的UINavigationController，咱们直接上代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> presentedViewController = <span class="keyword">self</span>.presentedViewController, <span class="keyword">let</span> vc = <span class="keyword">self</span>.visibleViewController, !presentedViewController.isBeingDismissed &#123;</span><br><span class="line">        <span class="keyword">return</span> vc.preferredStatusBarStyle</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.topViewController?.preferredStatusBarStyle ?? .<span class="keyword">default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要加一个判断条件，如果当前UINavigationController是使用present形式展现的，判断当前状态是Dismissed还是Presented。<br>如果是<code>Presented</code>状态，可以使用<code>visibleViewController</code>这个属性获取当前modal出来的ViewController，使用其preferredStatusBarStyle来管理StatusBar的样式。<br>如果是<code>Dismissed</code>状态，那使用<code>topViewController</code>的preferredStatusBarStyle来管理StatusBar的样式。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果使用自定义UINavigationController其使用present方式，需要<code>visibleViewController</code>+<code>topViewController</code>两者结合的方式适配。<br>如果只是单纯的使用自定义UINavigationController，只需要使用<code>topViewController</code>属性的方式适配。<br>如果你没有使用自定义UINavigationController，那么可以考虑使用<code>UINavigationBar</code>的<code>barStyle</code>属性的方式适配。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UINavigationController</tag>
        <tag>UIStatusBarStyle</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS组件二进制化</title>
    <url>/iOS/Binary-iOS-Components/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着业务的扩展，私有CocoaPod库和第三方CocoaPod库越来越多，项目中的文件也越来越多。每次pod install/update的时候，重新编译的过程需要等待很长时间，这就间接地向我们提出了加快编译速度的需求。<br>二进制化指的是通过编译把模块的源码转换成静态库或动态库，以提高该组件在项目中的编译速度。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul>
<li>创建一个Xcode项目，选择Framework或者Static Library模版</li>
<li>添加Cocoapods支持，用于调试的时候源码切换</li>
<li>添加Carthage支持，用于二进制化</li>
<li>添加Podspec，用于管理相关的二进制库</li>
</ul>
<h1 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h1><p>我们通过<code>Cocoapods</code>把每一个组件都拆成独立的<code>pod</code>库。  </p>
<h2 id="创建组件项目"><a href="#创建组件项目" class="headerlink" title="创建组件项目"></a>创建组件项目</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod lib create MyLib</span><br></pre></td></tr></table></figure>
<h2 id="编辑podspec-file"><a href="#编辑podspec-file" class="headerlink" title="编辑podspec file"></a>编辑podspec file</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  s.name             = <span class="string">'MyLib'</span></span><br><span class="line">  s.version          = <span class="string">'0.0.1'</span></span><br><span class="line">  s.summary          = <span class="string">'summary'</span></span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">  description</span><br><span class="line">                       DESC</span><br><span class="line">  s.homepage         = <span class="string">'远程仓库地址'</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  s.author           = &#123; <span class="string">'作者'</span> =&gt; <span class="string">'作者'</span> &#125;</span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'远程仓库地址'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class="line">  s.ios.deployment_target = <span class="string">'10.0'</span></span><br><span class="line">  s.source_files = <span class="string">'Sources/**/*.swift'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod lib lint MyLib.podspec</span><br></pre></td></tr></table></figure>

<h2 id="推送代码到远程仓库"><a href="#推送代码到远程仓库" class="headerlink" title="推送代码到远程仓库"></a>推送代码到远程仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag '0.0.1'</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<h1 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h1><p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a>是一个简单的,去集中化的依赖管理工具。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir my-vendors</span><br><span class="line">cd ~/my-vendors</span><br><span class="line">touch Cartfile</span><br></pre></td></tr></table></figure>

<h2 id="编辑Cartfile"><a href="#编辑Cartfile" class="headerlink" title="编辑Cartfile"></a>编辑Cartfile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># git &quot;https:&#x2F;&#x2F;github.com&#x2F;SVProgressHUD&#x2F;SVProgressHUD.git&quot; ~&gt; 1.0</span><br><span class="line"># 或者</span><br><span class="line">github &quot;SVProgressHUD&#x2F;SVProgressHUD&quot; ~&gt; 1.0</span><br></pre></td></tr></table></figure>

<h3 id="依赖源"><a href="#依赖源" class="headerlink" title="依赖源"></a>依赖源</h3><ul>
<li><code>github</code>：告诉Carthage去Github下载文件，格式为Username/ProjectName。</li>
<li><code>git</code>：资料库的地址，可以是远程的URL地址。使用git://, http://, ssh://或者是本地资料库地址。</li>
</ul>
<h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><ul>
<li><p><code>== 1.0</code>表示使用1.0版本</p>
</li>
<li><p><code>&gt;= 1.0</code>表示使用1.0版本或更高的版本</p>
</li>
<li><p><code>~&gt; 1.0</code>表示使用1.0版本以上但低于2.0版本</p>
</li>
<li><p><code>branch</code>、<code>tag</code>、<code>commit</code>表示使用特定的分支、标签、提交信息</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">carthage update --platform iOS --no-use-binaries</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--platform iOS</code>表示只构建iOS平台</li>
<li><code>--no-use-binaries</code>表示不要使用网上已经构建好的库，直接从本地源码重新构建  </li>
</ul>
</li>
</ul>
<p>当执行完上面这个命令后，会在当前目录下生成<code>Carthage/Checkouts</code>、<code>Carthage/Build</code>。其中Checkouts存放下载的源码，Build存放构建过的二进制文件。如图：<br><img src="/images/685141-219887c26a8566be.png" alt="示例图"></p>
<h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><p>由于目前Swift还没有Module Stability，最好是不要把<code>Carthage/Build</code>添加到代码库中。当每次拉取依赖后，使用当前电脑的Swift环境重新执行一次<code>carthage build</code>操作。</p>
<h1 id="创建二进制库Pod项目"><a href="#创建二进制库Pod项目" class="headerlink" title="创建二进制库Pod项目"></a>创建二进制库Pod项目</h1><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod lib create MyVendors</span><br></pre></td></tr></table></figure>
<p>编辑podspec file</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  s.name             = <span class="string">'MyVendors'</span></span><br><span class="line">  s.version          = <span class="string">'0.0.1'</span></span><br><span class="line">  s.summary          = <span class="string">'Vendor binary framework'</span></span><br><span class="line">  s.homepage         = <span class="string">'远程仓库地址'</span></span><br><span class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</span><br><span class="line">  s.author           = &#123; <span class="string">'作者'</span> =&gt; <span class="string">'作者'</span> &#125;</span><br><span class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'远程仓库地址'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></span><br><span class="line"></span><br><span class="line">  s.subspec <span class="string">"SVProgressHUD"</span> <span class="keyword">do</span> <span class="params">|sp|</span></span><br><span class="line">    sp.framework = <span class="string">'QuartzCore'</span></span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">'IS_SOURCE'</span>]</span><br><span class="line">      puts <span class="string">'Notice: SVProgressHUD is source now'</span></span><br><span class="line">      sp.dependency <span class="string">'SVProgressHUD'</span>, <span class="string">'~&gt; 2.2.5'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      puts <span class="string">'Notice: SVProgressHUD is binary now'</span></span><br><span class="line">      sp.vendored_frameworks = <span class="string">'Carthage/Build/iOS/SVProgressHUD.framework'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>然在你的主工程Podfile中加入:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'MyVendors'</span>, <span class="symbol">:subspecs</span> =&gt; [<span class="string">'SVProgressHUD'</span>], <span class="symbol">:path</span> =&gt; <span class="string">'../my-vendors'</span></span><br></pre></td></tr></table></figure>
<p>执行<code>pod install</code>，至此整个操作就已经完成了。如果需要源码调试，使用<code>IS_SOURCE=1 pod install</code>。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>如果项目使用的是Swift且Xcode创建的是Framework工程，那么你的主项目的Podfile里面需要加上<code>use_frameworks</code>标记。</li>
<li>如果项目中动态库的数量很多，这会影响项目启动时间。根据Apple的推荐，项目中不应该超过<code>6</code>个动态库，系统库除外。解决这个问题的方案是使用静态库。</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
        <tag>Carthage</tag>
      </tags>
  </entry>
</search>
